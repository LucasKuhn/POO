#BlueJ class context
comment0.target=ListaComEncadeamento
comment0.text=\n\ Uma\ implementa\u00E7\u00E3o\ de\ lista\ com\ encadeamento.\n\ \n\ @version\ 19/04\n\ @author\ Marcos\n
comment1.params=capacidade
comment1.target=ListaComEncadeamento(int)
comment1.text=\n\ Construtor\ que\ recebe\ como\ par\u00E2metro\ a\ capacidade\ m\u00E1xima\ da\ lista.\n\ O\ int\ recebido\ como\ par\u00E2metro\ ser\u00E1\ usado\ para\ inicializar\ a\ vari\u00E1vel\n\ de\ inst\u00E2ncia\ capacidade.\n\ \n\ @param\ capacidade\ capacidade\ m\u00E1xima\ da\ lista.\n
comment2.params=
comment2.target=ListaComEncadeamento()
comment2.text=\n\ Construtor\ sem\ par\u00E2metros\ que\ determina\ uma\ capacidade\ ilimitada\!\n
comment3.params=
comment3.target=int\ tamanho()
comment3.text=\n\ M\u00E9todo\ que\ retorna\ o\ tamanho\ da\ lista.\ Entende-se\ tamanho\ como\ \n\ a\ quantidade\ de\ objetos\ que\ est\u00E3o\ na\ lista\ (e\ n\u00E3o\ a\ capacidade\ m\u00E1xima\ dela\!)\n\ \n\ @return\ a\ quantidade\ de\ objetos\ que\ est\u00E3o\ na\ lista\n
comment4.params=obj
comment4.target=boolean\ pesquisa(java.lang.Object)
comment4.text=\n\ M\u00E9todo\ que\ procura,\ entre\ os\ objetos\ Aluno\ que\ est\u00E3o\ na\ lista,\ por\ um\ Aluno\ \n\ com\ o\ cpf\ informado\ no\ par\u00E2metro.\ \n\ \n\ @param\ cpf\ o\ String\ cpf\ \u00E9\ o\ argumento\ da\ pesquisa.\n\ @return\ o\ m\u00E9todo\ devolve\ um\ objeto\ Aluno.\ Se\ um\ aluno\ com\ o\ cpf\ n\u00E3o\ \u00E9\ encontrado,\n\ o\ m\u00E9todo\ retorna\ null\n
comment5.params=obj
comment5.target=void\ incluir(java.lang.Object)
comment5.text=\n\ M\u00E9todo\ para\ incluir\ um\ Aluno\ no\ final\ da\ lista.\ O\ m\u00E9todo\ verifica\n\ se\ a\ lista\ j\u00E1\ est\u00E1\ cheia\ e\ se\ o\ aluno\ j\u00E1\ n\u00E3o\ est\u00E1\ na\ lista\ (pelo\ cpf)\n\ \n\ @param\ aluno\ um\ objeto\ Aluno\ para\ ser\ inclu\u00EDdo\ na\ lista\n\ @return\ o\ m\u00E9todo\ retorna\ um\ c\u00F3digo\ int\ para\ informar\ o\ resultado\ da\ inclus\u00E3o.\n\ O\ c\u00F3digo\ pode\ ser\:\n\ 0\ -\ inclus\u00E3o\ com\ sucesso\n\ 1\ -\ lista\ cheia,\ portanto\ a\ inclus\u00E3o\ n\u00E3o\ acontece\n\ 2\ -\ j\u00E1\ h\u00E1\ um\ aluno\ com\ o\ mesmo\ cpf\ do\ aluno\ passado\ como\ par\u00E2metro\n
comment6.params=obj\ indice
comment6.target=int\ incluir(java.lang.Object,\ int)
comment6.text=\n\ M\u00E9todo\ para\ incluir\ um\ Aluno\ em\ um\ \u00EDndice\ espec\u00EDfico\ da\ lista,\ informado\ no\ par\u00E2metro.\n\ O\ m\u00E9todo\ verifica\ se\ a\ lista\ j\u00E1\ est\u00E1\ cheia,\ se\ o\ aluno\ j\u00E1\ n\u00E3o\ est\u00E1\ na\ lista\ (pelo\ cpf)\n\ e\ se\ o\ \u00EDndice\ informado\ est\u00E1\ no\ campo\ de\ \u00EDndices\ poss\u00EDveis\:\ maior\ ou\ igual\ a\ zero\ e\ \n\ menor\ ou\ igual\ ao\ tamanho\ da\ lista.\n\ \n\ @param\ aluno\ um\ objeto\ Aluno\ para\ ser\ inclu\u00EDdo\ na\ lista\n\ @param\ indice\ uma\ posi\u00E7\u00E3o\ espec\u00EDfica\ na\ lista\ onde\ o\ Aluno\ deve\ ser\ inclu\u00EDdo\n\ @return\ o\ m\u00E9todo\ retorna\ um\ c\u00F3digo\ int\ para\ informar\ o\ resultado\ da\ inclus\u00E3o.\n\ O\ c\u00F3digo\ pode\ ser\:\n\ 0\ -\ inclus\u00E3o\ com\ sucesso\n\ 1\ -\ lista\ cheia,\ portanto\ a\ inclus\u00E3o\ n\u00E3o\ acontece\n\ 2\ -\ j\u00E1\ h\u00E1\ um\ aluno\ com\ o\ mesmo\ cpf\ do\ aluno\ passado\ como\ par\u00E2metro\n\ 3\ -\ o\ \u00EDndice\ informado\ n\u00E3o\ \u00E9\ v\u00E1lido\n
comment7.params=obj
comment7.target=int\ incluirEmOrdem(java.lang.Object)
comment7.text=\n\ M\u00E9todo\ para\ incluir\ um\ Aluno\ em\ uma\ lista\ j\u00E1\ ordenada\ (\!\!),\ mantendo\ a\ ordem\ alfab\u00E9tica\ de\ nome.\n\ O\ m\u00E9todo\ verifica\ se\ a\ lista\ j\u00E1\ est\u00E1\ cheia\ e\ se\ o\ aluno\ j\u00E1\ n\u00E3o\ est\u00E1\ na\ lista\ (pelo\ cpf).\n\ \n\ @param\ aluno\ um\ objeto\ Aluno\ para\ ser\ inclu\u00EDdo\ na\ lista\ mantendo\ a\ ordem\n\ @return\ o\ m\u00E9todo\ retorna\ um\ c\u00F3digo\ int\ para\ informar\ o\ resultado\ da\ inclus\u00E3o.\n\ O\ c\u00F3digo\ pode\ ser\:\n\ 0\ -\ inclus\u00E3o\ com\ sucesso\n\ 1\ -\ lista\ cheia,\ portanto\ a\ inclus\u00E3o\ n\u00E3o\ acontece\n\ 2\ -\ j\u00E1\ h\u00E1\ um\ aluno\ com\ o\ mesmo\ cpf\ do\ aluno\ passado\ como\ par\u00E2metro\n
comment8.params=indice
comment8.target=java.lang.Object\ get(int)
comment8.text=\n\ M\u00E9todo\ que\ retorna\ o\ objeto\ Aluno\ que\ est\u00E1\ em\ um\ \u00EDndice\ espec\u00EDfico\ da\ lista.\n\ \n\ @param\ indice\ um\ \u00EDndice\ da\ lista\ de\ onde\ se\ deve\ obter\ o\ Aluno\n\ @return\ o\ objeto\ Aluno\ que\ est\u00E1\ no\ \u00EDndice\ especificado\ no\ par\u00E2metro,\ ou\ null\ \n\ caso\ o\ \u00EDndice\ n\u00E3o\ seja\ v\u00E1lido\ (fora\ dos\ \u00EDndices\ ocupados\ por\ alunos\ na\ lista)\n
comment9.params=
comment9.target=void\ ordena()
comment9.text=\n\ M\u00E9todo\ que\ ordena\ os\ alunos\ que\ est\u00E3o\ na\ lista\ em\ ordem\ alfab\u00E9tica\ de\ nome.\n
numComments=10
